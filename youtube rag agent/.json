{
  "name": "youtube rag agent",
  "nodes": [
    {
      "parameters": {
        "content": "# YouTube Transcript RAG Agent\n",
        "height": 460,
        "width": 1120,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1296,
        128
      ],
      "id": "9bcf44ec-7830-42dd-b938-ded924453767",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/pintostudio~youtube-transcript-scraper/run-sync-get-dataset-items?token=apify_api_aYmvqjVuv8heQgrVsZmAnd5lC4nLul1huTtV",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"videoUrl\": \"https://youtu.be/vpyllOeLhs4?si=OiHJBudRmtwbwtMn\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2464,
        1648
      ],
      "id": "8ac0cdd0-a8a0-4ce3-bc6c-8d7ffa6c7c51",
      "name": "Get Transcript"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "document",
          "mode": "list",
          "cachedResultName": "document"
        },
        "embeddingBatchSize": 50,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        3024,
        1648
      ],
      "id": "ca0a17bd-20c2-44da-92ef-d5beafa49936",
      "name": "Supabase Vector Store"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        2352,
        1120
      ],
      "id": "567f4e9c-e0aa-45ee-86e7-c0e7177d10c3",
      "name": "When chat message received",
      "webhookId": "89df1a57-f248-4a00-8515-48bae1ce1b74"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Use this tool to search through YouTube transcripts to answer the user's question.",
        "tableName": {
          "__rl": true,
          "value": "document",
          "mode": "list",
          "cachedResultName": "document"
        },
        "topK": 20,
        "useReranker": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        2928,
        1136
      ],
      "id": "6bfb25a8-638e-4c67-a488-6e02fca87b9f",
      "name": "Supabase"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1zVvRgXF7zTg-L_FPwWKhsfV2_q3hhrypD0gbltTgzCY",
          "mode": "list",
          "cachedResultName": "youtube ",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zVvRgXF7zTg-L_FPwWKhsfV2_q3hhrypD0gbltTgzCY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1zVvRgXF7zTg-L_FPwWKhsfV2_q3hhrypD0gbltTgzCY/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "url": "={{ $json.metadata.videoURL }}",
            "title ": "={{ $json.metadata.videoTitle }}",
            "transcript": "={{ $json.pageContent }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "title ",
              "displayName": "title ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "transcript",
              "displayName": "transcript",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        3328,
        1648
      ],
      "id": "5beb374a-5bca-417f-92af-0d48bad8472b",
      "name": "Append row in sheet",
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node - Combine transcript text into one string (no newlines)\n\n// Get the input data (first item from the input)\nconst inputData = $input.all()[0].json;\n\n// Extract the data array\nconst transcriptData = inputData.data;\n\n// Filter out items that don't have text and combine all text segments\nconst combinedText = transcriptData\n  .filter(item => item.text) // Only include items with text property\n  .map(item => item.text.trim().replace(/\\n/g, ' ')) // Get the text, trim whitespace, and replace newlines with spaces\n  .join(' ') // Join with spaces\n  .replace(/\\s+/g, ' '); // Replace multiple spaces with single space\n\n// Return the combined text as a single item\nreturn [\n  {\n    json: {\n      combinedText: combinedText,\n      originalItemCount: transcriptData.length,\n      textSegmentCount: transcriptData.filter(item => item.text).length\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2672,
        1568
      ],
      "id": "09698aa9-e2a6-40fb-89cd-b3dd4a8bc45d",
      "name": "Transcript"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node - Group transcript into chunks of 20 with timestamps\n\n// Get the input data (first item from the input)\nconst inputData = $input.all()[0].json;\n\n// Extract the data array and filter out items without text\nconst transcriptData = inputData.data.filter(item => item.text);\n\n// Group into chunks of 20\nconst chunkSize = 20;\nconst chunks = [];\n\nfor (let i = 0; i < transcriptData.length; i += chunkSize) {\n  const chunk = transcriptData.slice(i, i + chunkSize);\n  \n  // Combine all text from this chunk\n  const combinedText = chunk\n    .map(item => item.text.trim())\n    .join(' ');\n  \n  // Calculate timestamp range\n  const firstItem = chunk[0];\n  const lastItem = chunk[chunk.length - 1];\n  \n  const startTime = parseFloat(firstItem.start);\n  const endTime = parseFloat(lastItem.start) + parseFloat(lastItem.dur);\n  \n  // Helper function to format seconds to MM:SS format\n  const formatTime = (seconds) => {\n    if (seconds < 60) {\n      return `${seconds.toFixed(3)}s`;\n    }\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toFixed(3).padStart(6, '0')}`;\n  };\n  \n  // Create the grouped object\n  chunks.push({\n    json: {\n      text: combinedText,\n      timestamp: {\n        start: startTime,\n        end: endTime,\n        duration: endTime - startTime,\n        startFormatted: formatTime(startTime),\n        endFormatted: formatTime(endTime),\n        durationFormatted: formatTime(endTime - startTime)\n      },\n      itemCount: chunk.length,\n      chunkNumber: Math.floor(i / chunkSize) + 1\n    }\n  });\n}\n\n// Return all chunks as separate items\nreturn chunks;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2672,
        1744
      ],
      "id": "6f18d641-0cae-4628-8c28-77cff9cba59a",
      "name": "Timestamps"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2848,
        1648
      ],
      "id": "7a9b37a5-bea2-47bf-9b8d-840d413ddbe4",
      "name": "Merge"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.rerankerCohere",
      "typeVersion": 1,
      "position": [
        3104,
        1264
      ],
      "id": "8dee8663-0996-48e7-a371-3fe703069bf5",
      "name": "Reranker"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=# Overview\nYou are an AI assistant with access to a tool called Supabase, which contains transcripts of YouTube videos.\n\nWhen the user asks a question, you may query Supabase multiple times to gather the most relevant information. Use these results to generate a complete and accurate answer.\n\nFor every fact, insight, or quote you include, explicitly cite the video title, timestamp, and video URL, all of which are available in the metadata. Include direct quotes from the transcript when helpful, and always cite sources inline in this format:\n“quoted content” (Video Title, 03:12 — Watch here)\n\nQuery iteratively until you are confident you have enough context to respond helpfully."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        2544,
        1120
      ],
      "id": "0f4d4074-993a-4db7-aac4-4ceee544f486",
      "name": "YouTube RAG Agent"
    },
    {
      "parameters": {
        "formTitle": "YouTube Database Submission",
        "formDescription": "Drop in a YouTube video URL",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Video Title",
              "requiredField": true
            },
            {
              "fieldLabel": "url",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        2272,
        1648
      ],
      "id": "0d17141a-9892-4d01-bb1a-ea157256a204",
      "name": "On form submission",
      "webhookId": "652c28ba-bfda-4668-81f2-1ef54c842604"
    },
    {
      "parameters": {
        "content": "# YouTube Transcript RAG Agent\n",
        "height": 460,
        "width": 1120,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2224,
        976
      ],
      "id": "15571098-98f2-44e5-967c-f73ed3163fbd",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "modelName": "embed-english-light-v3.0"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsCohere",
      "typeVersion": 1,
      "position": [
        2960,
        1840
      ],
      "id": "7d5c3de7-9931-498e-a5c9-74f0f5391885",
      "name": "Embeddings Cohere2"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $('Merge').item.json.text }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "videoTitle",
                "value": "={{ $('On form submission').item.json['Video Title'] }}"
              },
              {
                "name": "timestamp",
                "value": "={{ $('Merge').item.json.timestamp.startFormatted }}-{{ $('Merge').item.json.timestamp.endFormatted }}"
              },
              {
                "name": "videoURL",
                "value": "={{ $('On form submission').item.json.url }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        3168,
        1856
      ],
      "id": "4af5bc06-360d-467a-8789-4d2ffe8d3880",
      "name": "Default Data Loader1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        2560,
        1280
      ],
      "id": "d3d7097c-9099-4c4c-a46e-694a2bd601f0",
      "name": "Groq Chat Model2"
    },
    {
      "parameters": {
        "modelName": "embed-english-light-v3.0"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsCohere",
      "typeVersion": 1,
      "position": [
        2976,
        1344
      ],
      "id": "cec9380a-b50f-415a-a37e-91d348930f47",
      "name": "Embeddings Cohere3"
    }
  ],
  "pinData": {},
  "connections": {
    "Get Transcript": {
      "main": [
        [
          {
            "node": "Transcript",
            "type": "main",
            "index": 0
          },
          {
            "node": "Timestamps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "YouTube RAG Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "ai_tool": [
        [
          {
            "node": "YouTube RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcript": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Timestamps": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reranker": {
      "ai_reranker": [
        [
          {
            "node": "Supabase",
            "type": "ai_reranker",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Get Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Cohere2": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader1": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "YouTube RAG Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Cohere3": {
      "ai_embedding": [
        [
          {
            "node": "Supabase",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8480b755-2710-49b1-979e-7af08c70c855",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7e2678144a6e5bfa832af2b949c97c2a44e0584e8246fc8382691d9cb694cd0d"
  },
  "id": "k9IqeBjpOlLRUhVL",
  "tags": []
}
